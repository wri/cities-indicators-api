name: Cities API Image Builder

on:
  push:
    branches:
      - ccl-develop
  workflow_dispatch:

jobs:
  cities-indicator-api-build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      # Checkout
      - name: Checkout code
        uses: actions/checkout@v3

      # Set Environment Variables
      - name: Set environment variables
        run: |
          echo "CITIES_API_AIRTABLE_KEY=${{ secrets.CITIES_API_AIRTABLE_KEY }}" >> $GITHUB_ENV
          echo "AIRTABLE_BASE_ID=${{ vars.AIRTABLE_BASE_ID }}" >> $GITHUB_ENV
          echo "REPOSITORY_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)" >> $GITHUB_ENV

      # OIDC Assume Role
      - name: OIDC Assume Role
        id: oidc-assume-role
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::540362055257:role/GitHubActionsOIDC
          aws-region: us-east-1

      # AWS ECR Login
      - name: ECR Login
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 540362055257.dkr.ecr.us-east-1.amazonaws.com

      # Docker Image Build
      - name: Build Docker image
        id: build-image
        run: |
          docker build -t ${{ env.REPOSITORY_NAME }}-img:latest .
          docker tag ${{ env.REPOSITORY_NAME }}-img:latest 540362055257.dkr.ecr.us-east-1.amazonaws.com/${{ env.REPOSITORY_NAME }}-img:latest

      # Push to ECR
      - name: Push to AWS ECR
        run: |
          docker push 540362055257.dkr.ecr.us-east-1.amazonaws.com/${{ env.REPOSITORY_NAME }}-img:latest

      # Deploy to AWS APP Runner
      - name: Deploy to App Runner
        id: deploy-apprunner
        run: |
          aws apprunner update-service \
            --service-arn arn:aws:apprunner:us-east-1:540362055257:service/cities-api-app-runner-service-Docker/ce42838cdd6c4764991c775f2a13141f \
            --source-configuration '{"ImageRepository": {"ImageIdentifier": "540362055257.dkr.ecr.us-east-1.amazonaws.com/cities-indicators-api-img:latest", "ImageRepositoryType": "ECR"}}' \
            --region us-east-1 \
            --no-paginate \
            --output json

          SERVICE_ARN="arn:aws:apprunner:us-east-1:540362055257:service/cities-api-app-runner-service-Docker/ce42838cdd6c4764991c775f2a13141f"
          aws apprunner describe-service --service-arn $SERVICE_ARN --region us-east-1 --query "Service.Status" --output text
          while [ "$(aws apprunner describe-service --service-arn $SERVICE_ARN --region us-east-1 --query 'Service.Status' --output text)" != "RUNNING" ]; do
            echo "Waiting for service to stabilize..."
            sleep 30
          done
          echo "Service is stable."

      # Cleanup Docker Image if Deploy Fails
      - name: Cleanup Docker Image on Failure
        if: failure()
        run: |
          REPOSITORY_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          IMAGE_TAG=540362055257.dkr.ecr.us-east-1.amazonaws.com/${{ env.REPOSITORY_NAME }}-img:latest
          echo "Deleting Docker image from ECR: $IMAGE_TAG"
          aws ecr batch-delete-image --repository-name ${REPOSITORY_NAME}-img --image-ids imageTag=latest --region us-east-1