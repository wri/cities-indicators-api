name: Cities API Image Builder

on:
  push:
    branches:
      - develop
      - ccl-develop
  workflow_dispatch:

jobs:
  cities-indicator-api-build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      # Checkout
      - name: Checkout code
        uses: actions/checkout@v3

      # Set Environment Variables
      - name: Set environment variables
        run: |
          echo "CITIES_API_AIRTABLE_KEY=${{ secrets.CITIES_API_AIRTABLE_KEY }}" >> $GITHUB_ENV
          echo "AIRTABLE_BASE_ID=${{ vars.AIRTABLE_BASE_ID }}" >> $GITHUB_ENV
          echo "REPOSITORY_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)" >> $GITHUB_ENV

          # Define SERVICE_NAME based on branch
          BRANCH=$(echo "${{ github.ref }}" | sed 's|refs/heads/||')
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV

          if [[ "$BRANCH" == "main" ]]; then
            echo "SERVICE_NAME=${{ vars.SERVICE_ARN_PRD }}" >> $GITHUB_ENV
          elif [[ "$BRANCH" == "develop" ]]; then
            echo "SERVICE_NAME=${{ vars.SERVICE_ARN_DEV }}" >> $GITHUB_ENV
          elif [[ "$BRANCH" == "ccl-develop" ]]; then
            echo "SERVICE_NAME=${{ vars.SERVICE_ARN_CCL_DEV }}" >> $GITHUB_ENV
          else
            echo "Unsupported branch: $BRANCH"
            exit 1
          fi

      # OIDC Assume Role
      - name: OIDC Assume Role
        id: oidc-assume-role
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.OIDC_ROLE }}
          aws-region: us-east-1

      # AWS ECR Login
      - name: ECR Login
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 540362055257.dkr.ecr.us-east-1.amazonaws.com

      # Docker Image Build
      - name: Build Docker image
        id: build-image
        run: |
          docker build -t ${{ env.REPOSITORY_NAME }}-img:$BRANCH .
          docker tag ${{ env.REPOSITORY_NAME }}-img:$BRANCH 540362055257.dkr.ecr.us-east-1.amazonaws.com/${{ env.REPOSITORY_NAME }}-img:$BRANCH

      # Push to ECR
      - name: Push to AWS ECR
        id: push-image
        run: |
          docker push 540362055257.dkr.ecr.us-east-1.amazonaws.com/${{ env.REPOSITORY_NAME }}-img:$BRANCH

      # Deploy to AWS APP Runner
      - name: Deploy to App Runner
        id: deploy-apprunner
        run: |
          aws apprunner start-deployment \
            --service-arn "$SERVICE_NAME" \
            --region us-east-1 \
            --no-paginate \
            --output json

          SERVICE_STATUS=$(aws apprunner describe-service --service-arn "$SERVICE_NAME" --region us-east-1 --query "Service.Status" --output text)

          while [ "$SERVICE_STATUS" != "RUNNING" ]; do
            if [[ "$SERVICE_STATUS" == "FAILED" || "$SERVICE_STATUS" == "ROLLBACK_SUCCEEDED" ]]; then
              echo "Deployment failed, exiting."
              exit 1
            fi
            echo "Deployment in progress..."
            sleep 30
            SERVICE_STATUS=$(aws apprunner describe-service --service-arn "$SERVICE_NAME" --region us-east-1 --query "Service.Status" --output text)
          done

          echo "Deployment completed."

      # Cleanup Docker Image if Deploy Fails
      - name: Cleanup Docker Image on Failure
        id: delete-image
        if: failure()
        run: |
          REPOSITORY_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          IMAGE_TAG=540362055257.dkr.ecr.us-east-1.amazonaws.com/${{ env.REPOSITORY_NAME }}-img:$BRANCH
          echo "Deleting Docker image from ECR: $IMAGE_TAG"
          aws ecr batch-delete-image --repository-name ${REPOSITORY_NAME}-img --image-ids imageTag=$BRANCH --region us-east-1
